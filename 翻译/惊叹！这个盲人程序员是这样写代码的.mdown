[Software development 450 words per minute](https://www.vincit.fi/en/blog/software-development-450-words-per-minute/)

# 惊叹！这个盲人程序员是这样写代码的

![](https://www.vincit.fi/wp-content/uploads/2017/08/20170825_081206-1024x768.jpg)

"Something's a little bit off here." That's what I predict your first thought to be upon seeing my cubicle for the first time. There's no screen or mouse in sight. Instead there's a guy hammering away on a keyboard, staring at seemingly nothing.

我认为你第一次看到我的工作间肯定这样想 —— “总感觉少些什么”。没有显示器和鼠标，却有个人敲打着键盘，不知注视着哪里。

It's only me, and my colleagues can assure you that I'm mostly harmless. I'm a software developer working at Vincit offices in Tampere. I'm also blind. In this blog post I'm going to shed some light on the way I work.

这就是我，我同事可以证明我没问题。我是位于坦佩雷（芬兰西南部一座城市）的 Vincit 写字楼中的一名软件开发者。我双目失明。这篇文章中我将讲述有关我工作中的事情。

## Are you blind as in actually blind?
## 你真的什么都看不到吗？

Correct. I can perceive sunlight and some other really bright lights but that's about it. In essence, nothing that would be useful for me at work.

准确来说，我觉察到阳光和其他明亮的光线，不过也仅限这些。其实，这对我的工作也并没有什么帮助。

## What are you doing there, then?
## 你工作内容是什么？

The same as almost everyone else, that is: making software and bantering with my colleagues whenever the time permits. I have worked in full stack web projects with a focus on the backend. I have also taken up the role of a general accessibility consultant – or police; depends on how you look at it.

和大部分人一样：忙时写代码，闲时和同事吹逼。我做全栈项目，主攻后端。兼职访问顾问 - 或称监管，随你如何称呼。

## How do you use the computer?
## 你如何使用电脑？

The computer I use is a perfectly normal laptop running Windows 10. It's in the software where the "magic happens". I use a program called a screen reader to access the computer. A screen reader intercepts what's happening on the screen and presents that information via braille (through a separate braille display) or synthetic speech. And it's not the kind of synthetic speech you hear in today's smart assistants. I use a robotic-sounding voice which speaks at around 450 words per minute. For comparison, English is commonly spoken at around 120-150 words per minute. There's one additional quirk in my setup: Since I need to read both Finnish and English regularly I'm reading English with a Finnish speech synthesizer. Back in the old days screen readers weren't smart enough to switch between languages automatically, so this was what I got used to. Here's a sample of this paragraph being read as I would read it:

我用的电脑是一台运行 Windows 10 的普通笔记本。是其中的软件让一切变得神奇。我使用一款叫做屏幕阅读器的程序来访问电脑。屏幕阅读器监听屏幕上的变化并通过盲文（需要单独的盲文设备）或合成的声音来展示给用户。这并不是你如今听到的各种智能助理的合成声音。我使用一种机械声音，每分钟能说 450 个单词。相比较而言，英语正常语速每分钟 120-150 个单词。我有一个怪癖：我既说英语也说芬兰语，我用芬兰语合成器读英语，因为老旧的屏幕阅读器在语言之间切换不够智能，所以我习惯这样做。下面是个例子是阅读这个段落，我能听懂。

https://www.vincit.fi/wp-content/uploads/2017/08/mpsample.mp3?_=1

And here's the same text spoken by an English speech synthesizer:

下面是英语合成器发出的声音：

https://www.vincit.fi/wp-content/uploads/2017/08/essample.mp3?_=2

A mouse is naturally not very useful to me so I work exclusively at the keyboard. The commands I use should be familiar to anyone reading this post: Arrow keys and the tab key move you around inside a window, alt+tab changes between windows etc. Screen readers also have a whole lot of shortcuts of their own, such as reading various parts of the active window or turning some of their features on or off.

鼠标对于我来说并不是非常有用，所以我仅仅通过键盘工作。在座的各位应该十分熟悉我用到的命令：方向键和 tab 键控制窗口内的移动，alt+tab 切换窗口等等。屏幕阅读器也有很多自己的快捷键，比如阅读活动窗口的不同区域或开关一些功能特性。

It's when reading web pages and other formatted documents that things get a little interesting. You see, a screen reader presents its information in chunks. That chunk is most often a line but it may also be a word, a character or any other arbitrary piece of text. For example, if I press the down arrow key on a web page I hear the next line of the page. This type of reading means that I can't just scan the contents of my screen the same way a sighted person would do with their eyes. Instead, I have to read through everything chunk by chunk, or skip over those chunks I don't care about.

有趣的是阅读网页和其他格式化文档。你看，屏幕阅读器分块呈现信息。每一块可能是一行，也可能是一个单词、一个字母，亦或是文本的片段。举个例子，我在网页中按向下的方向键，我听到页面的下一行。我并不能像正常人一样用眼睛从屏幕上阅读内容。相反，我听到一块一块的内容，或跳过我不感兴趣的部分。

Speech or braille alone can't paint an accurate representation of how a window is laid out visually. All the information is presented to me in a linear fashion. If you copy a web page and paste it into notepad you get a rough idea of how web pages look to me. It's just a bunch of lines stacked on top of another with most of the formatting stripped out. However, a screen reader can pick up on the semantics used in the HTML of the web page, so that links, headings, form fields etc. are announced to me correctly. That's right: I don't know that a check box is a check box if it's only styled to look like one. However, more on that later; I'll be devoting an entire post to this subject. Just remember that the example I just gave is a crime against humanity.

语音或盲文并不能描绘出窗口的显示布局。信息以线性方式呈现给我。如果你把网页复制粘贴进记事本，你就能明白我看到的网页是什么样子的。就是剥离大部分格式的多行文本。然而屏幕阅读器可以获取网页上的 HTML 语法，所以我也能知道超链接、标题、表单等等。事实上，如果非复选框元素展示成复选框样式，我并不能知道这是复选框。我之后将写一篇文章详细讲述这些内容，记住我刚刚举的是个“反人类”例子。
（译者注：突然感到自责和羞愧，深深明白了一个道理：不要用各种有含意义的传统标签 hack 布局和样式，也不要因为 css 的强大而懒得使用各种有含义的传统标签。共勉）

I spend a good deal of my time working at the command line. In fact I rarely use any other graphical applications than a web browser and an editor. I've found that it's often much quicker to do the task at hand on the command line than to use an interface which was primarily designed with mouse users in mind.

我花费大量时间工作在命令行上。事实上我通常用浏览器和编辑器，很少用其他图形应用程序。相比那些为鼠标用户打造的图形界面，我发现用命令行处理手边的工作更加高效。

So, given my love of the command line, why am I sticking with Windows, the operating system not known for its elegant command line tools? The answer is simple: Windows is the most accessible operating system there is. NVDA, my screen reader of choice is open source and maintained more actively than any other screen reader out there. If I had the choice I would use Mac OS since in my opinion it strikes a neat balance between usability and functionality. Unfortunately VoiceOver, the screen reader built in to Mac OS, suffers from long release cycles and general neglect, and its navigation models aren't really compatible with my particular way of working. There's also a screen reader for the Gnome desktop and, while excellently maintained for such a minor user base, there are still rough edges that make it unsuitable for my daily use. So, Windows it is. I've been compensating for Windows' inherent deficiencies by living inside Git Bash which comes with an excellent set of GNU and other command line utilities out of the box.

既然我如此热爱命令行，为什么我却要选择 Windows 这个并不以命令行出名的操作系统呢？答案很简单：Windows 是最方便的操作系统。[NVDA](https://www.nvaccess.org/)是我所选择的屏幕阅读器，它是开源的并且维护比其他阅读器更频繁。如果上天再我一次机会，我可能会选 Mac 系统，因为我认为它是易用性和功能性平衡的典范。不幸的是 Mac 系统上的屏幕阅读器 [VoiceOver](https://www.apple.com/accessibility/mac/vision/) 经历了漫长的发布周期从而被遗忘，并且它的导航模型和我独特的工作方式并不协调。当然这里也有一个 Gnome 桌面上的[屏幕阅读器](https://wiki.gnome.org/action/show/Projects/Orca?action=show&redirect=Orca)，虽然用户很少，依然被很好地维护着，不过还有一些不完善的地方和我日常工作不协调。所以，我选择 Windows。由 GNU 诞生的 Git Bash 和其他命令行工具弥补了 Windows 内置命令行的缺陷。

## How can you code?
## 你如何写代码？

It took me quite a long time to figure out why this question was such a big deal for so many people. Remember what I said earlier about reading text line by line? That's how I read code. I do skip over the lines that aren't useful to me, or maybe listen only halfway through them just for context, but whenever I actually need to know what's going on I have to read everything as if I were reading a novel. Naturally I can't just read through a huge codebase like that. In those cases I have to abstract some parts of the code in my mind: this component takes x as its input and returns y, never mind what it actually does.

我花费好长时间才明白为什么大家觉得这个问题是个很高深的问题。记得我上面说过一行一行地阅读文本吗？我也是通过这种方式读代码。通常我会跳过无用的行，或仅听半行来获取内容，但当我需要知道完整信息的时候，我不得不像读小说一样读完所有东西。我当然无法阅读整个代码库。这种情况下我会在脑中抽象一部分代码：这个组件输入 x 返回 y，并不用关心细节逻辑。

This type of reading makes me do some coding tasks a little bit differently than my sighted colleagues. For example, when doing a code review I prefer to look at the raw diff output whenever I can. Side-by-side diffs are not useful to me, in fact they are a distraction if anything. The + and - signs are also a far better indicator of modified lines than background colours, not because I couldn't get the names of those colours, but because "plus" takes far less time to say than some convoluted shade of red that is used for highlighting an added line. (I am looking at you, Gerrit.)

这种阅读方式让我和正常同事的工作方式有些区别。举个例子，当代码审查时，我喜欢看原始 diff 输出，并列窗口显示 diff 对我并不适用，而且还容易让人分心。有修改的代码行上用符号 + 和 - 比用不同背景色标注也要好太多，并不是因为我不能获知颜色名字，而是因为在新增的一行中，读“加”这个字比读“带复杂阴影的高亮红色”用更短的时间。（嘿，我说你呢 Gerrit (一款代码审查工具)）

You might think that indentation and other code formatting would be totally irrelevant to me since those are primarily visual concerns. This is not true: proper indentation helps me just as much as it does a sighted programmer. Whenever I'm reading code in braille (which, by the way, is a lot more efficient than with speech) it gives me a good visual clue of where I am, just like it does for a sighted programmer. I also get verbal announcements whenever I enter an indented or unindented block of text. This information helps me to paint a map of the code in my head. In fact Python was the first real programming language I picked up (Php doesn't count) and its forced indentation never posed a problem for me. I'm a strong advocate of a clean and consistent coding style for a number of reasons, but mostly because not having one makes my life much more difficult

你或许会认为缩进和其他代码格式和我无关，因为都是基本的视觉问题。并不是这样，正确的缩进对我的帮助和正常开发者一样。当我用盲文（比语音更加高效）读代码时，我像其他正常程序员一样清楚代码结构。当我进入一段有缩进或无缩进的代码时，我也会得到语音提醒。这些信息帮助我在脑中描绘代码结构。事实上我学的第一门语言就是 Python （PHP 不算），它强制使用代码缩进，这对我来说并不是问题。我有众多理由来强烈建议使用整洁统一的代码风格，其中之一就是不要让我的生活变得更加艰难了，好吗。

## Which editor do you prefer?
## 你喜欢哪款编辑器？

Spoiler alert: The answer to this question doesn't start with either V or E. (Granted, I do use Vim for crafting git commit messages and other quick notes on the command line. I consider myself neutral on this particular minefield.) A year ago my answer would have been, of all things, Notepad++. It's a lightweight, well-made text editor that gets the job done. However, a year ago I hadn't worked in a large-scale Java project. When that eventually happened it was time to pick between Notepad++ and my sanity. I ended up clinging to the latter (as long as I can, anyway) and ditching Notepad++ in favour of IntelliJ IDEA. It has been my editor of choice ever since. I have a deeply-rooted aversion towards IDEs since most of them are either inaccessible or inefficient to work with solely on the keyboard. Chances are that I would have switched to using an IDE a lot sooner if I was sighted.

剧透一下：这个答案并不是以 V 或者 E 开头（我虽然通过命令行用 Vim 来写 git commit 信息和其他备注。我认为我在这场圣战中是中立的）（译者注：Vim 和 Emacs 梗）一年前我认为 Notepad++ 最棒，它是轻量级的做工精细的文本编辑器。然而一年前我还没有接触大规模 Java 项目，当我接触这种项目时，意味着我应该在 Notepad++ 和理智之间做个选择。最后我选择理智，抛弃 Notepad++ 转投 IntelliJ IDEA 的怀抱。从那之后 IntelliJ IDEA 便是我首选编辑器。我曾对各种 IDE 有深深怨念，它们大多数在纯键盘流操作下麻烦又低效。如果我视力没问题，我肯定早就跳到 IDE 阵营了。

But why Notepad++, you might ask. There are more advanced lightweight editors out there like Sublime text or Atom. The answer is simple: neither of them is accessible to screen readers. Text-mode editors like Vim aren't an option either, since the screen reader I use has some problems in its support of console applications that prevent those editors from being used for anything longer than a commit message. Sadly, accessibility is the one thing that has the last word on the tools I use. If it's not workable enough that I can use it efficiently, it's out of the question.

但你可能会问，为什么当初选 Notepad++。还有其他很多更先进的轻量级编辑器，比如  Sublime 或 Atom。原因很简单：屏幕阅读器无法访问它们。Vim 一类的文本编辑器也是如此，我使用的屏幕阅读器对命令行程序的支持有问题，在这些编辑器上无法处理多于 commit 信息的文本。很遗憾，可用性决定了我能够使用的工具。即使我不能高效工作，也不是什么大问题。

## Do you ever work with frontend code?
## 你编写过前端代码吗？

You would think that frontend development was so inherently visual that it would be no place for a blind developer, and for the most part that is true. You won't find me doing a basic Proof-of-Concept on my own, since those projects tend to be mostly about getting the looks right and adding the real functionality later.

你应该认为前端开发和视觉有关，注定与盲人程序员无缘。基本上是这样。我从来不自己做概念原型，我做都是有界面，需要随后加入功能的项目。

However, I've had my fair share of Angular and React work too. How's that? Many web apps of today have a lot going on under the hood in the browser. For example, I once worked a couple of weeks adding internationalization support to a somewhat complex Angular app. I didn't need to do any visual changes at all.

然而，我也做过 Angular 和 React 工作任务。怎么会这样？如今很多 APP 基于浏览器。举个例子，我曾花费两周时间为一个 Angular APP 增加国际化支持。我并不需要做任何视觉上的改动。

I've found that libraries like Bootstrap are a godsend for people like me. Because of the grid system I can lay out a rough version of the user interface on my own. Despite this all the interface-related changes I'm doing are going through a pair of eyes before shipping to the customer. So, to sum up: I can do frontend development up to a point, at least while not touching the presentation layer too much.

我发现对于我这类开发者开说，像 Bootstrap 这类的库简直是上天的礼物。正因为栅格系统（Bootstrap的响应式布局解决方案），我可以自己构建一个粗糙的界面。尽管如此，我做的有关界面的改动在呈现给用户之前仍然要有一双眼睛检查。所以，总而言之，我可以在一定程度上做些前端开发，至少不是和表现层太相关。

## How about all the things you didn't mention?
## 有什么其他没有提到的东西？

There are certainly a lot of things I had to leave out of this blog post. As promised I'll be devoting a post to the art of making web pages more accessible, since the lack of proper semantics is one of my pet peeves. However, there's a good chance I won't leave it at that. Stay tuned!

其实这篇文章有很多东西没有表达出来。正如上文所承诺，我将全力以赴写一篇文章，有关制作易访问网页的艺术，因为一言未尽是我讨厌的事情之一。我不会半途而废的，敬请期待。