JavaScript函数式编程
Functional JavaScript

第一章 JavaScript函数式编程简介
    确定抽象，并为其构建函数。
    利用已有的函数来构建更为复杂的抽象。
    通过将现有的函数传给其他的函数来构建更加复杂的抽象。
    这就是函数式编程。
第二章 一等函数与Applicative编程
    在Java程序中的每个实例是以类作为它的模板生成的，而JavaScript却是利用现有的对象作为原型来生成特定的实例。
第三章 变量的作用域和闭包
    在JavaScript中任何没有用var关键字声明的变量都是全局变量。    
第四章 高阶函数
    函数作为参数。
    函数作为返回结果。
第五章 由函数构建函数
    略
第六章 递归
    递归解决方案包括使用对一个普通问题子集的单一抽象的应用。
    递归可以隐藏可变状态。
    递归是一种实现懒惰和无限大结构的方法。
第七章 纯度、不变性和更改政策
    不可变数据在JavaScript中是不现实的，因为变量可变是默认的。然而，通过观察程序中的变化模式，你可以得到尽可能接近的不可变性。
第八章 基于流的编程
    总之，方法链是让对象的方法返回一个一般的this引用，以便一般方法可以在序列中调用。
第九章 无类编程
    略