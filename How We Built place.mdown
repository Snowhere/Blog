[How We Built r/Place](https://redditblog.com/2017/04/13/how-we-built-rplace/)
#How We Built r/Place
#Reddit 的愚人节项目 r/Place 是怎么做出来的

Each year for April Fools’, rather than a prank, we like to create a project that explores the way that humans interact at large scales. This year we came up with Place, a collaborative canvas on which a single user could only place a single tile every five minutes. This limitation de-emphasized the importance of the individual and necessitated the collaboration of many users in order to achieve complex creations. Each tile placed was relayed to observers in real-time.

每年的愚人节，我们喜欢创建项目来探索人类大规模的交流互动，而不是做一些恶作剧。今年我们提出了 Place，这是一个协作的画板，每个用户每 5 分钟只能修改一个小块。这一限制弱化了个体的重要性，强化了大量用户协作完成复制创作的必要性。每个小块的变化实时传递给观察者。

Multiple engineering teams (frontend, backend, mobile) worked on the project and most of it was built using existing technology at Reddit. This post details how we approached building Place from a technical perspective.

许多开发团队（前端、后端、移动端）协作开发这个项目，项目大部分基于 Reddit 已有的技术。这篇文章从技术角度详细描述我们如何完成 Place。

But first, if you want to check out the code for yourself, you can find it here. And if you’re interested in working on projects like Place in the future, we’re hiring!

且慢。如果你想查看我们的代码，[在这里](http://github.com/reddit/reddit-plugin-place-opensource)。如果你对构建 Place 这一类项目感兴趣，[我们欢迎你](https://about.reddit.com/careers/)

##Requirements
##需求

Defining requirements for an April Fools’ project is extremely important because it will launch with zero ramp-up and be available immediately to all of Reddit’s users. If it doesn’t work perfectly out of the gate, it’s unlikely to attract enough users to make for an interesting experience.

定义愚人节项目的需求十分重要，因为它一旦发布即面向所有 Reddit 用户，没有增长过程。如果它一开始并不能完美运作，似乎就不能吸引足够的用户来创作并获得有趣的体验。

* The board must be 1000 tiles by 1000 tiles so it feels very large.
* All clients must be kept in sync with the same view of the current board state, otherwise users with different versions of the board will have difficulty collaborating.
* We should support at least 100,000 simultaneous users.
* Users can place one tile every 5 minutes, so we must support an average update rate of 100,000 tiles per 5 minutes (333 updates/s).
* The project must be designed in such a way that it’s unlikely to affect the rest of the site’s normal function even with very high traffic to r/place.
* The configuration must be flexible in case there are unexpected bottlenecks or failures. This means that board size and tile cooldown should be adjustable on the fly in case data sizes are too large or update rates are too high.
* The API should be generally open and transparent so the reddit community can build on it (bots, extensions, data collection, external visualizations, etc) if they choose to do so.

* 画板必须有 1000×1000 个小块，所以它会非常大。
* 所有客户端必须和当前画板状态同步，并显示一致，否则用户基于不同版本的画板难以协作。
* 我们必须支持至少 100000 的并发同步用户。
* 用户每 5 分钟可以修改一个小块，所以我们必须支持平均每 5 分钟 100000 个小块的更新（每秒 333 个更新）。
* 项目的设计必须遵循这一点，即使 r/place 流量巨大，也不能影响站点其他功能。
* 配置必须有足够弹性，应对意外的瓶颈或故障。这意味着画板的大小和小块的使用间隔可以在运行时调节，以防数据量过大或更新过于频繁。
* API 必须开放和透明，reddit 社区如果对此有兴趣，可以在此之上构建项目（机器人、扩展、数据收集、外部可视化等等）。

##Backend
##后端

###Implementation decisions
###实施决策

The main challenge for the backend was keeping all the clients in sync with the state of the board. Our solution was to initialize the client state by having it listen for real-time tile placements immediately and then make a request for the full board. The full board in the response could be a few seconds stale as long as we also had real-time placements starting from before it was generated. When the client received the full board it replayed all the real-time placements it received while waiting. All subsequent tile placements could be drawn to the board immediately as they were received.

后端最大的挑战就是保持所有客户端与画板的状态同步。我们的解决方案是初始化客户端状态时立刻实时监听小块的变化，然后请求整个画板。只要我们在生成画板的时候有实时的小块更改，那么响应返回的整个画板就会有几秒的延迟。当客户端接收到整个画板，把在等待时的小块变化在画板上重演。所有随后的小块变化都将在被接收到时画在画板上。

For this scheme to work we needed the request for the full state of the board to be as fast as possible. Our initial approach was to store the full board in a single row in Cassandra and each request for the full board would read that entire row. The format for each column in the row was:

为了让这个策略正常实施，我们需要尽可能快的请求到画板的整体状态。我们的初步方案是用[单行Cassandra](https://pandaforme.gitbooks.io/introduction-to-cassandra/content/understand_the_cassandra_data_model.html)储存整个画板，每个针对整个画板的请求可以读取整行。行中的每列格式如下所示：

`(x, y): {‘timestamp’: epochms, ‘author’: user_name, ‘color’: color}`

Because the board contained 1 million tiles this meant that we had to read a row with 1 million columns. On our production cluster this read took up to 30 seconds, which was unacceptably slow and could have put excessive strain on Cassandra.

因为画板包含一百万个小块，这意味着我们不得不读取有一百万列的行。在我们的生产集群上这种读取花费 30 秒，慢到无法接受，所以我们不能过度依赖 Cassandra。

Our next approach was to store the full board in redis. We used a bitfield of 1 million 4 bit integers. Each 4 bit integer was able to encode a 4 bit color, and the x,y coordinates were determined by the offset (offset = x + 1000y) within the bitfield. We could read the entire board state by reading the entire bitfield. We were able to update individual tiles by updating the value of the bitfield at a specific offset (no need for locking or read/modify/write). We still needed to store the full details in Cassandra so that users could inspect individual tiles to see who placed them and when. We also planned on using Cassandra to restore the board in case of a redis failure. Reading the entire board from redis took less than 100ms, which was fast enough.

我们下一个方案使用 redis 储存整个画板。我们使用 bitfield 处理一百万个 4 位的整型。每个 4 位的整型可以编码 4 位的颜色，横纵（x，y）坐标可以在 bitfield 里用偏移量表示（offset = x + 1000y）。我们可以通过读取整个 bitfield 来获取整个画板的状态。我们可以通过在 bitfield 中更新指定偏移量上的值，来更新单独的小块(不在需要加锁或读/改/写)。我们仍然需要在 Cassandra 中储存所有的细节，让用户可以检查单独的小块，看一看何时何人更改了它。我们也计划用 Cassandra 备份整个画板，以防 redis 失效。从 redis 中读取整个画板不超过 100ms，这已经足够快了。

Illustration showing how colors were stored in redis, using a 2×2 board:

插图展示了我们如何用 redis 储存 2×2 画板的颜色：

![](https://redditupvoted.files.wordpress.com/2017/04/drawio-1.png?w=720&h=199)

We were concerned about exceeding maximum read bandwidth on redis. If many clients connected or refreshed at once they would simultaneously request the full state of the board, all triggering reads from redis. Because the board was a shared global state the obvious solution was to use caching. We decided to cache at the CDN (Fastly) layer because it was simple to implement and it meant the cache was as close to clients as possible which would help response speed. Requests for the full state of the board were cached by Fastly with an expiration of 1 second. We also added the stale-while-revalidate cache control header option to prevent more requests from falling through than we wanted when the cached board expired. Fastly maintains around 33 POPs which do independent caching, so we expected to get at most 33 requests per second for the full board.

我们非常关心 redis 读取最大带宽。如果很多客户端同时链接或刷新，它们会同时请求整个画板的状态，全部都触发 redis 的读取操作。因为画板是全局共享状态，显而易见的解决方案是使用缓存。我们决定在 CDN 层（Fastly）使用缓存，因为实现简单，并且缓存离客户端更近可以提高响应速度。对整个画板的请求被 Fastly 缓存下来并设置 1 秒的超时时间。我们也添加了[stale-while-revalidate](https://docs.fastly.com/guides/performance-tuning/serving-stale-content#usage)这个控制缓存的头信息，来应对画板缓存过期导致超过预期的大量请求。[Fastly 维护着大约 33 处独立缓存 POPs（接入点）](https://www.fastly.com/network-map)，所以我们预期每秒最多有 33 个针对整个画板的请求。

We used our websocket service to publish updates to all the clients. We’ve had success using it in production for reddit live threads with over 100,000 simultaneous viewers, live PM notifications, and other features. The websocket service has also been a cornerstone of our past April Fools projects such as The Button and Robin. For r/place, clients maintained a websocket connection to receive real-time tile placement updates.

我们使用我们的[websocket 服务](https://github.com/reddit/reddit-service-websockets)向所有客户端推送更新。我们已经成功地在[reddit live](https://www.reddit.com/live)生产环境中应用过它，来处理超过 100000 的并发用户，比如 live PM notifications 功能或其他特性。wesocket 服务也曾是我们过去愚人节项目的基础，比如 [The Button](https://redditblog.com/2015/04/01/the-button/) 和 [Robin](https://redditblog.com/2016/04/01/Robin/) 两个项目。对于 r/place 项目，客户端维护一个 websocket 链接来接收实时的小块变化更新。

###API

Retrieve the full board
**检索整个画板**

![](https://redditupvoted.files.wordpress.com/2017/04/board-bitmap.png?w=720&h=368)

Requests first went to Fastly. If there was an unexpired copy of the board it would be returned immediately without hitting the reddit application servers. Otherwise, if there was a cache miss or the copy was too old, the reddit application would read the full board from redis and return that to Fastly to be cached and returned to the client.

请求首先到达 Fastly。如果那里有一份未过期的画板副本，它会立刻返回从而不需要访问 reddit 应用服务器。否则如果缓存未命中或副本过时，reddit 应用会从 redis 中读取整个画板然后返回到 Fastly 中并缓存，并返回给客户端。

Request rate and response time as measured by the reddit application:

reddit 应用测量的请求速率和响应时间：

<iframe src="https://snapshot.raintank.io/dashboard-solo/snapshot/CspXQWvOn7sRoQvtk9RH2yrGafLF9AgE?from=1490976000000&amp;to=1491242400000&amp;theme=light&amp;panelId=1" width="720" height="320" frameborder="0" class="" scrolling="no" allowfullscreen="" resize="0" replace_attributes="1"></iframe>

Notice that the request rate never exceeds 33/s, meaning that the caching by Fastly was very effective at preventing most requests from hitting the reddit application.

注意，请求速率从没超过 33 个/秒，说明 Fastly 缓存非常给力，阻止了大量直接访问 reddit 应用的请求。

<iframe name="wpcom-iframe-0b2c4adce942ed170612e522db909c6a-59155d496d725" id="wpcom-iframe-0b2c4adce942ed170612e522db909c6a-59155d496d725" frameborder="0" scrolling="no" width="720" height="320" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" class="wpcom-protected-iframe "></iframe>

When a request did hit the reddit application the read from redis was very fast.

当请求访问 reddit 应用时，redis 的读取操作非常迅速。

Draw a tile

**绘制一个小块**

![](https://redditupvoted.files.wordpress.com/2017/04/draw.png?w=720&h=533)

The steps for drawing a tile were:

绘制一个小块的步骤如下：

1. Read the timestamp of the user’s last tile placement from Cassandra. If it was more recent than the cooldown period (5 minutes) reject the draw attempt and return an error to the user.
2. Write the tile details to redis and Cassandra.
3. Write the current timestamp as the user’s last tile placement in Cassandra.
4. Tell the websocket service to send a message to all connected clients with the new tile.

1. 从 Cassandra 读取用户上一次更改小块的时间戳。如果和当前时间间隔比冷却时间（5 分钟）短，拒绝绘制请求，返回给用户一个错误。
2. 向 redis 和 Cassandra 写入小块详情。
3. 向 Cassandra 写入用户上一次修改小块的时间戳。
4. 让 websocket 服务向所有链接的客户端发送新的小块。

All reads and writes to Cassandra were done with consistency level QUORUM to ensure strong consistency.

Cassandra 的所有读写操作的[一致性设置为 QUORUM 级别](http://docs.datastax.com/en/archived/cassandra/1.2/cassandra/dml/dml_config_consistency_c.html)，来确保强一致性。

We actually had a race condition here that allowed users to place multiple tiles at once. There was no locking around the steps 1-3 so simultaneous tile draw attempts could all pass the check at step 1 and then draw multiple tiles at step 2. It seems that some users discovered this error or had bots that didn’t gracefully follow the ratelimits so there were about 15,000 tiles drawn that abused this error (~0.09% of all tiles placed).

我们当然也有竞态条件允许用户一次更改多个小块。在步骤 1-3 中并没有锁，因此批量小块修改的操作通过步骤 1 的检查之后将在步骤 2 中进行修改。看起来一些用户发现了这个漏洞或一些机器脚本不遵守速率限制，所以大概有 15000 个小块被利用这个漏洞进行更改（占全部更改小块的 0.09%）

Request rate and response time as measured by the reddit application:

reddit 应用测量的请求速率和响应时间：

<iframe name="wpcom-iframe-d8bfa352ad390d370c76999322d22890-59187944ae18c" id="wpcom-iframe-d8bfa352ad390d370c76999322d22890-59187944ae18c" frameborder="0" scrolling="no" width="720" height="320" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" class="wpcom-protected-iframe "></iframe>

We experienced a maximum tile placement rate of almost 200/s. This was below our calculated maximum rate of 333/s (average of 100,000 users placing a tile every 5 minutes).

我们经历了更改小块最大速率大概 200/s。这比我们估算的最大速率 333/s 要低（平均每 5 分钟 100000 个用户更改小块）。

<iframe name="wpcom-iframe-51cafa4aeb7bb8a17be4e89766152e23-59187944ae396" id="wpcom-iframe-51cafa4aeb7bb8a17be4e89766152e23-59187944ae396" frameborder="0" scrolling="no" width="720" height="320" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" class="wpcom-protected-iframe "></iframe>

Get details of a single tile

**获取单个小块详情**

![](https://redditupvoted.files.wordpress.com/2017/04/pixel1.png?w=720&h=251)

Requests for individual tiles resulted in a read straight from Cassandra.

直接从 Cassandra 请求单个小块。

Request rate and response time as measured by the reddit application:

reddit 应用测量的请求速率和响应时间：

<iframe src="https://snapshot.raintank.io/dashboard-solo/snapshot/r6g7cutrnyaP8oQhVkZcjZpcbe1WQ8f5?from=1490976000000&amp;to=1491242400000&amp;theme=light&amp;panelId=3" width="720" height="320" frameborder="0" class="" scrolling="no" allowfullscreen="" resize="0" replace_attributes="1"></iframe>

This endpoint was very popular. In addition to regular client requests, people wrote scrapers to retrieve the entire board one tile at a time. Since this endpoint wasn’t cached by the CDN, all requests ended up being served by the reddit application.

这个服务端点用的很多。除了客户端频繁的请求之外，有人编写抓取工具每次检索整个画板的一个小块。由于这个服务端点没有在 CDN 缓存，所有请求被 reddit 应用程序处理。

<iframe src="https://snapshot.raintank.io/dashboard-solo/snapshot/IG0h7j3hnsdDgIJUeRqNhLEk6gnmBVU5?from=1490976000000&amp;to=1491242400000&amp;theme=light&amp;panelId=6" width="720" height="320" frameborder="0" class="" scrolling="no" allowfullscreen="" resize="0" replace_attributes="1"></iframe>

Response times for these requests were pretty fast and stable throughout the project.

在整个项目中，这些请求的响应时间非常迅速稳定。

###Websockets
###Websockets

We don’t have isolated metrics for r/place’s effect on the websocket service, but we can estimate and subtract the baseline use from the values before the project started and after it ended.

我们并没有在 websocket 服务中为 r/place 做单独指标，但是我们可以估计并减去项目开始前后的基本使用量。

Total connections to the websocket service:

websocket 服务总连接数：

<iframe src="https://snapshot.raintank.io/dashboard-solo/snapshot/sHVdLetjYXpTj6wYEm9MJ7BbIVMT2YLn?from=1490976000000&amp;to=1491242400000&amp;theme=light&amp;panelId=12" width="720" height="320" frameborder="0" class="" scrolling="no" allowfullscreen="" resize="0" replace_attributes="1"></iframe>

The baseline before r/place began was around 20,000 connections and it peaked at 100,000 connections, so we probably had around 80,000 users connected to r/place at its peak.

r/place 开始前的基本使用量大概有 20000 个连接，而峰值 100000 个链接，所以高峰期我们大概有 80000 个用户连接到 r/place。

Websocket service bandwidth:

Websocket 服务带宽：

<iframe src="https://snapshot.raintank.io/dashboard-solo/snapshot/0NqYDPULvSli579TsulcvT3MsTzodgqX?from=1490976000000&amp;to=1491242400000&amp;theme=light&amp;panelId=13" width="720" height="320" frameborder="0" class="" scrolling="no" allowfullscreen="" resize="0" replace_attributes="1"></iframe>

At the peak of r/place the websocket service was transmitting over 4 gbps (150 Mbps per instance and 24 instances).

高峰期 r/place 的 websocket 服务吞吐量超过 4gbps（24个实例，每个 150 Mbps）

##Frontend: Web and Mobile Clients
##前端：Web和移动端

Building the frontend for Place involved many of the challenges for cross-platform app development. We wanted Place to be a seamless experience on all of our major platforms including desktop web, mobile web, iOS and Android.

构建 r/place 的前端工程涉及到了跨平台开发的众多挑战。我们期望 r/place 在我们所有主流平台上拥有无缝体验，包括桌面web、移动web、iOS 和 Android。

The UI in place needed to do three important things:

r/place 的 UI 需要做三件很重要的事：

1. Display the state of the board in real time
2. Facilitate user interaction with the board
3. Work on all of our platforms, including our mobile apps


1. 实时展示画板状态。
2. 让用户和画板交互方便容易
3. 在我们所有平台上正常运行，包括移动端 app。

The main focus of the UI was the canvas, and the Canvas API was a perfect fit for it. We used a single 1000 x 1000 <canvas> element, drawing each tile as a single pixel.

UI 的主要焦点集中在了 canvas，并且 [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API) 完全能胜任要求。我们使用一个 1000 x 1000 的 `<canvas>` 元素，把每个小块当做一个像素进行绘制。

###Drawing the canvas
###绘制 canvas

The canvas needed to represent the state of the board in real time. We needed to draw the state of the entire board when the page loaded, and draw updates to the board state that came in over websockets. There are generally three ways to go about updating a canvas element using the CanvasRenderingContext2D interface:

canvas 需要实时展示整个画板的状态。我们需要在页面载入的时候绘制整个画板的状态，然后更新通过 websocket 传输过来的画板状态。通过[CanvasRenderingContext2D](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D)接口，有三种方式更新 canvas 元素。

1. Drawing an existing image onto the canvas using drawImage()
2. Draw shapes with the various shape drawing methods, e.g. using fillRect() to fill a rectangle with a color
3. Construct an ImageData object and paint it into the canvas using putImageData()

1. 用[drawImage()](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)将一个存在的图像绘制进 canvas。
2. 通过众多图形绘制的方法来绘制各种形状，比如用[fillRect()](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect)绘制一个有颜色的矩形。
3. 构造一个 ImageData 对象，然后用[putImageData()](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData)方法将它绘制进 canvas。

The first option wouldn’t work for us since since we didn’t already have the board in image form, leaving options 2 and 3. Updating individual tiles using fillRect() was very straightforward: when a websocket update comes in, just draw a 1 x 1 rectangle at the (x, y) position. This worked OK in general, but wasn’t great for drawing the initial state of the board. The putImageData() method was a much better fit for this, since we were able to define the color of each pixel in a single ImageData object and draw the whole canvas at once.

第一种选项并不适合我们，因为我们并没有画板的图像格式，还剩下 2、3 选项。用`fillRect()`方法更新单独的小块非常简洁：当 websocket 通知更新时，只需要在(x,y)位置处绘制一个 1 x 1 的矩形。一般来说这很棒，但并不适合绘制画板的初始状态。` putImageData()`方法显然更合适，我们可以在 ImageData 对象中定义每个像素的颜色，然后一次性绘制整个 canvas。

**Drawing the initial state of the board**
**绘制画板的初始状态**

Using putImageData() requires defining the board state as a Uint8ClampedArray, where each value is an 8-bit unsigned integer clamped to 0-255. Each value represents a single color channel (red, green, blue, and alpha), and each pixel requires 4 items in the array. A 2 x 2 canvas would require a 16-byte array, with the first 4 bytes representing the top left pixel on the canvas, and the last 4 bytes representing the bottom right pixel.

我们使用`putImageData()`方法，前提需要将画板状态定义成[Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray)形式，每个值用 8 位无符号整型表示 0-255 之间的数字。每一个值表示单个颜色通道（红、绿、蓝、alpha），每个像素需要 4 个值组成的数组。一个 2 x 2 的 canvas 需要一个 16 字节的数组，前 4 字节表示 canvas 左上角的像素，最后 4 字节表示右下角像素。

Illustration showing how canvas pixels relate to their Uint8ClampedArray representation:

插图展示了 canvas 像素和 Uint8ClampedArray 映射关系：

![](https://redditupvoted.files.wordpress.com/2017/04/drawio-2.png?w=720&h=294)

For place’s canvas, the array is 4 million bytes long, or 4MB.

对于 r/place 的 canvas，数组大小是四百万字节，也就是 4MB。

On the backend, the board state is stored as a 4-bit bitfield. Each color is represented by a number between 0 and 15, allowing us to pack 2 pixels of color information into each byte. In order to use this on the client, we needed to do 3 things:

在后端，画板状态储存格式是 4 位的 bitfield。每个颜色用 0 到 15 之间的数字表示，这允许我们将 2 像素的颜色信息打包进 1 个字节（1字节=8位）。为了在客户端配合使用，我们需要做 3 件事：

1. Pull the binary data down to the client from our API
2. “Unpack” the data
3. Map the 4-bit colors to useable 32-bit colors

1. 将二进制数据从我们的 API 拉取到客户端。
2. “解压”数据
3. 将 4 位颜色映射成可用的 32 位颜色。

To pull down the binary data, we used the Fetch API in browsers that support it. For those that don’t, we fell back to a normal XMLHttpRequest with responseType set to “arraybuffer”.

为了拉取二进制数据，我们在支持[Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)的浏览器中使用这个 API。在不支持的浏览器中，我们使用[XMLHttpRequest](https://www.youtube.com/watch?v=Pubd-spHN-0)，并把 responseType 设置为 `“arraybuffer”`。

The binary data we receive from the API contains 2 pixels of color data in each byte. The smallest TypedArray constructors we have allow us to work with binary data in 1-byte units. This is inconvenient for use on the client so the first thing we do is to “unpack” that data so it’s easier to work with. This process is straightforward, we just iterate over the packed data and split out the high and low order bits, copying them into separate bytes of another array. Finally, the 4-bit color values needed to be mapped to useable 32-bit colors.

我们从 API 接收到的二进制数据中，每个字节有 2 像素的颜色数据。[TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray)的构造函数允许操作的最小单位是 1 字节。这在客户端上并不方便使用，所以我们做的第一件事就是“解压”，让数据更容易处理。方式很简洁，我们遍历打包的数据并按照高位低位分割比特位，将它们复制到另一个数组的不同字节中。最后，4 位的颜色值映射成可用的 32 位颜色。

<table>
   <tr>
      <td>API Response</td>
      <td rowspan="2">0x47</td>
      <td rowspan="2">0xE9</td>
   </tr>
   <tr>
      <td>Unpacked</td>
      <td>0x04</td>
      <td>0x07</td>
      <td>0x0E</td>
      <td>0x09</td>
   </tr>
   <tr>
      <td>Mapped to 32bit colors</td>
      <td>0xFFA7D1FF</td>
      <td>0xA06A42FF</td>
      <td>0xCF6EE4FF</td>
      <td>0x94E044FF</td>
   </tr>
</table>

The ImageData structure needed to use the putImageData() method requires the end result to be readable as a Uint8ClampedArray with the color channel bytes in RGBA order. This meant we needed to do another round of “unpacking”, splitting each color into its component channel bytes and putting them into the correct index. Needing to do 4 writes per pixel was also inconvenient, but luckily there was another option.

`ImageData`这种数据结构需要使用`putImageData`方法，最终结果要求是可读的`Uint8ClampedArray`格式并且颜色通道字节要按照 RGBA 这种顺序。这意味着我们要做另一遍“解压”，将每个颜色拆分成颜色通道字节并按顺序排列。每个像素要做 4 次操作,这不是很方便，但幸运的是有其他方式。

TypedArray objects are essentially array views into ArrayBuffer instances, which actually represent the binary data. One neat thing about them is that multiple TypedArray instances can read and write to the same underlying ArrayBuffer instance. Instead of writing 4 values into an 8-bit array, we could write a single value into a 32-bit array!  Using a Uint32Array to write, we were able to easily update a tile’s color by updating a single array index. The only change required was that we had to store our color palette in reverse-byte order (ABGR) so that the bytes automatically fell in the correct position when read using the Uint8ClampedArray.

`TypeArray`对象们本质上是`ArrayBuffer`的数组视图，实际上表示二进制数据。它们共同的一点就是多个`TypeArray`实例可以基于一个`ArrayBuffer`实例进行读写。我们不必将 4 个值写入 8 位的数组，我们可以直接把单个值写入一个 32 位的数组。使用`Uint32Array`写入值，我们可以通过更新数组单个索引来轻松更新单个小块颜色。我们唯一需要做的就是把我们的颜色字节逆序储存（ABGR），这样一来使用`Uint8ClampedArray`读取数据时可以自动把字节填入正确位置。

<table>
    <tr>
        <td rowspan="4">0</td>
        <td rowspan="4">1</td>
        <td rowspan="4">2</td>
        <td rowspan="4">3</td>
    </tr>
    <tr>
        <td rowspan="4">0xFFD1A7FF</td>
        <td rowspan="4">0xFF426AA0</td>
        <td rowspan="4">0xFFE46ECF</td>
        <td rowspan="4">0xFF44E094</td>
    </tr>
    <tr>
        <td>255</td>
        <td>167</td>
        <td>209</td>
        <td>255</td>
        <td>160</td>
        <td>106</td>
        <td>66</td>
        <td>255</td>
        <td>207</td>
        <td>110</td>
        <td>228</td>
        <td>255</td>
        <td>148</td>
        <td>224</td>
        <td>68</td>
        <td>255</td>
    </tr>
    <tr>
        <td>r</td>
        <td>g</td>
        <td>b</td>
        <td>a</td>
        <td>r</td>
        <td>g</td>
        <td>b</td>
        <td>a</td>
        <td>r</td>
        <td>g</td>
        <td>b</td>
        <td>a</td>
        <td>r</td>
        <td>g</td>
        <td>b</td>
        <td>a</td>
   </tr>
</table>

**Handling websocket updates**
**处理 websocket 更新**

Using the drawRect() method was working OK for drawing individual pixel updates as they came in, but it had one major drawbacks: large bursts of updates coming in at the same time could cripple browser performance. We knew that updates to the board state would be very frequent, so we needed to address this issue.

响应每个像素更新时，用`drawRect()`方法绘制它们很方便，但这有个缺点：当大量更新在同一时间来到，会影响浏览器性能。我们知道画板状态更新十分频繁，所以我们需要处理这个问题。

Instead of redrawing the canvas immediately each time a websocket update came in, we wanted to be able to batch multiple websocket updates that come in around the same time and draw them all at once. We made two changes to do this:

我们希望在一个时间点前后的 websocket 更新能够批量绘制一次，而不是每次 websocket 更新来到就立刻重新绘制 canvas。我们做了以下两点改变：

1. We stopped using drawRect() altogether, since we’d already figured out a nice convenient way of updating many pixels at once with putImageData()
2. We moved the actual canvas drawing into a requestAnimationFrame loop

1. 因为我们发现了使用`putImageData()`一次更新多个像素这条明路，所以我们不再使用`drawRect()`。
2. 我们把绘制 canvas 操作放到`requestAnimationFrame `循环中。

By moving the drawing into an animation loop, we were able to write websocket updates to the ArrayBuffer immediately and defer the actual drawing. All websocket updates in between frames (about 16ms) were batched into a single draw. Because we used requestAnimationFrame, this also meant that if draws took too long (longer than 16ms), only the refresh rate of the canvas would be affected (rather than crippling the entire browser).

把绘制移到动作循环中，我们可以及时将 websocket 更新写入`ArrayBuffer`，然后延迟绘制。每一帧（大概 16ms）间的 websocket 更新会再一次绘制中批量执行。因为我们使用`requestAnimationFrame`，这意味着每次绘制时间不能太长（不超过 16ms），只有 canvas 的刷新速率受影响（而不是拖慢整个浏览器）。

###Interacting with the Canvas
###Canvas 的交互

Equally importantly, the canvas needed to facilitate user interaction. The core way that users can interact with the canvas is to place tiles on it. Precisely drawing individual pixels at 100% scale would be extremely painful and error prone, so we also needed to be able to zoom in (a lot!). We also needed to be able to pan around the canvas easily, since it was too large to fit on most screens (especially when zoomed in).

还有非常重要的一点，canvas 需要方便用户的交互。用户与 canvas 核心交互方式是更改上面的小块。在 100% 缩放下，精确地选择绘制单个像素很不方便，而且容易出错。所以我们需要放大显示（放大很多）。我们也需要方便的平移 canvas，因为在多数浏览器上它太大了（尤其是放大后）。

**Camera zoom**
**视角缩放**

Users were only allowed to draw tiles once every 5 minutes, so misplaced tiles would be especially painful. We had to zoom in on the canvas enough that each tile would be a fairly large target for drawing. This was especially important for touch devices. We used a 40x scale for this, giving each tile a 40 x 40 target area. To apply the zoom, we wrapped the <canvas> element in a <div> that we applied a CSS transform: scale(40, 40) to. This worked great for placing tiles, but wasn’t ideal for viewing the board (especially on small screens), so we made this toggleable between two zoom levels: 40x for drawing, 4x for viewing.

用户只能每五分钟绘制一次小块，所以选错小块非常令人不爽。我们需要把 canvas 放大到每个小块都成为一个相当大的目标。这在触摸设备上尤其重要。我们使用 40x 的放大比例，给每个小块 40 x 40 的目标区域。为了应用缩放，我们把`<canvas>`元素包裹进一个`<div>`，并给 div 设置 CSS 属性`transform: scale(40, 40)`。这样一来，小块的布置变得非常方便，但整个画板的显示并不理想（尤其是在小屏幕上），所以我们混合使用两种缩放级别：40x 用于绘制，4x 用于显示。

Using CSS to scale up the canvas made it easy to keep the code that handled drawing the board separate from the code that handled scaling, but unfortunately this approach had some issues. When scaling up an image (or canvas), browsers default to algorithms that apply “smoothing” to the image. This works OK in some cases, but it completely ruins pixel art by turning it into a blurry mess. The good news it that there’s another CSS, image-rendering,  which allows us to ask browsers to not do that. The bad news is that not all browsers fully support that property.

使用 CSS 来放大 canvas 使得绘制画板的代码和缩放代码相分离，但不巧这种方式也带来一些问题。当放大一个图片（或 canvas），浏览器默认使用“平滑”算法处理图片。这适用于一些场景，但也彻底毁灭了像素艺术并把它变得混乱模糊。好消息是有另一个 CSS [image-rendering](https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering)允许我们命令浏览器不这么做。坏消息并不是所有浏览器完全支持这个属性。

*Bad news blurs:*
*坏消息，变得模糊：*

![](https://redditupvoted.files.wordpress.com/2017/04/www-reddit-com-place-webviewtrue-1.png?w=720&h=251)

We needed another way to scale up the canvas for these browsers. I mentioned earlier on that there are generally three ways to go about drawing to a canvas. The first method, drawImage(), supports drawing an existing image or another canvas into a canvas. It also supports scaling that image up or down when drawing it, and though upscaling has the same blurring issue by default that upscaling in CSS has, this can be disabled in a more cross-browser compatible way by turning off the CanvasRenderingContext2D.imageSmoothingEnabled flag.

So the fix for our blurry canvas problem was to add another step to the rendering process. We introduced another <canvas> element, this one sized and positioned to fit across the container element (i.e. the viewable area of the board). After redrawing the canvas, we use drawImage() to draw the visible portion of it into this new display canvas at the proper scale. Since this extra step adds a little overhead to the rendering process, we only did this for browsers that don’t support the CSS image-rendering property.

Camera pan

The canvas is a fairly big image, especially when zoomed in, so we needed to provide ways of navigating it. To adjust the position of the canvas on the screen, we took a similar approach to what we did with scaling: we wrapped the <canvas> element in another <div> that we applied CSS transform: translate(x, y) to. Using a separate div made it easy to control the order that these transforms were applied to the canvas, which was important for preventing the camera from moving when toggling the zoom level.

We ended up supporting a variety of ways to adjust the camera position, including: